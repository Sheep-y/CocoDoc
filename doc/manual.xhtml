<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head><meta charset="UTF-8" />
<title>CocoDoc: HTML App builder</title>
</head><body>
<h3>CocoDoc v0.8</h3>   <p>Licensed under <a href='http://www.gnu.org/copyleft/gpl.html'>LGPL v3</a>. </p>
<p>
   CocoDoc is a simple text document builder, designed to merge web app resources such as html, css, js, and images. <br/>
   Usage: Drag and drop build file onto jar, or pass in build file(s) as parameter. Default build file is "cocodoc.conf".
</p>
<h4>Syntax Example</h4>
<pre><code>
  &lt;html>&lt;link rel="stylesheet" href="style.css">&lt;style>&lt;?coco-css style.css?> body {
    background: url('background.jpg');  background: url('&lt;?coco-datauri background.jpg?>');
  }&lt;/style>  &lt;img src="image.png">
  &lt;?coco-inline file(image.png) encode(base64) prefix("data:image/png;base64,") position(src of img before) ?>
</code></pre>
<h4>Directives</h4>
<dl>
  <dt>&lt;?coco-inline&gt;</dt>  <dd>Inline a file.</dd>
  <dt>&lt;?coco-image&gt;</dt>   <dd>Inline an image, i.e. <code>encode(base64) prefix(${auto-datauri}) position(noerr,replace src of &lt;img&gt; before this)</code>.</dd>
  <dt>&lt;?coco-script&gt;</dt>  <dd>Inline a js script, i.e. <code>delete(noerr,src of this)</code>.</dd>
  <dt>&lt;?coco-css&gt;</dt>     <dd>Inline a css, i.e. <code>delete(noerr,the &lt;link&gt;[href][rel$=stylesheet] before this)</code>.</dd>
  <dt>&lt;?coco-datauri&gt;</dt> <dd>Inline any file as data uri, i.e. <code>encode(base64) prefix(${auto-datauri})</code>.</dd>
  <dt>&lt;?coco&gt;</dt>         <dd>Auto detect <code>coco-image</code>, <code>coco-script</code>, <code>coco-css</code>, and <code>coco-inline</code>(if (X)HTML).  Otherwise error.</dd>
  <dt>&lt;?coco-start&gt;</dt>   <dd>Start a process block. A block allows you to inline many files and deflate or encode all of them, for example.</dd>
  <dt>&lt;?coco-end&gt;</dt>     <dd>Ends a process block.</dd>
  <dt>&lt;?coco-output&gt;</dt>  <dd>Specify output file for current scope. Default output to upper scope, or to console when at top scope.</dd>
</dl>
<h4>Processes</h4>
<p>    Many processes accepts "noerr" as parameter to ignore errors and allow execution to continue. <br/>
    For "delete" and "position", tags must be closed and attributes must be quoted.</p>
<dl>
  <dt>file(filename)</dt>           <dd>Name of file(s) to inline.  Read data is in binary form.  Output to <code>NUL</code> or <code>/dev/null</code> will discard output.</dd>
  <dt>charset(utf-8)</dt>           <dd>Alias of <code>text</code>, see below. If used to convert input, should be the first or second parameter.</dd>
  <dt>delete(noerr?,locator)</dt>   <dd>Stuffs to delete. ( <i>attr</i> of | (the|1st|2nd|all)? (&lt;?(<i>tag</i>|any)&gt;[<i>attr</i>]*|line)? (before|after) | this )+</dd>
  <dt>position(noerr?,before|after|replace? locator)</dt> <dd>Position and scope of output. Default use current position (this).</dd>
</dl>
<h4>Data Processes</h4>
<p>    These process may modify data in binary or text form.  If conversion is necessary, it will be done using last used encoding.</p>
<dl>
  <dt>binary(utf-8)</dt>            <dd>Explictly convert text data to binary using the first encoding that works. Default utf-8. </dd>
  <dt>text(utf-8)</dt>              <dd>Explictly convert binary data to text using the first encoding that works. Default utf-8,utf-16.</dd>
  <dt>coco</dt>                     <dd>Run coco parsing. [Text]</dd>
  <dt>deflate</dt>                  <dd>Deflate data at maximum compression. [Binary]</dd>
  <dt>decode(base64,xml)</dt>       <dd>Decode data from Base64 code / XML entities. [Text]</dd>
  <dt>encode(base64,xml,crlf)</dt>  <dd>Encode data into Base64 code / XML entities / JS string / URL / convert line breaks to lf/crlf. [Text]</dd>
  <dt>prefix("prefix")</dt>         <dd>Add text to head of data. Use <kbd>${auto-datauri}</kbd> to auto set mime and charset. [Text]</dd>
  <dt>postfix("postfix")</dt>       <dd>Add text to tail of data. [Text]</dd>
  <dt>test(xml)</dt>                <dd>Test (validate) current data as xml. [Text or Binary]</dd>
  <dt>trim(xml,css,js,line,ws,crlf)</dt> <dd>Trim XML/CSS/JS comments, lines, multi spaces, and line breaks. "oneline" = "line,ws,crlf" [Text]</dd>
</dl>
</body></html>