<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head><meta charset="UTF-8" />
<title>CocoDoc Design Doc</title>
</head><body>
<h3>CocoDoc v1 Design Doc</h3>
<aside>
   Date: <time>2015-05-13</time>. <br/>
   All documents and source codes are embedded in the exe or jar like a zip.
</aside>
<section>
   <h4>Purpose</h4>
   <p>
      CocoDoc is a simple file processor specialise in merging text and binary files to build independent, single file web app.
      (It is <em>not</em> designed to replace Ant/Grunt/Gulp.)
   </p>
   <h5>Aims</h5>
   <ol>
      <li>Simple setup, simple to build. (e.g. drop file on builder / default build file)</li>
      <li>Base (x)html file can be used both after build (single file) and before build (multi-file).</li>
      <li>Multi-level building. (e.g. consolidate data js and trim/compress as one entity)</li>
      <li>Support data uri, mime detection, charset conversion.</li>
      <li>Support both GUI and commandline (headless) environment.</li>
   </ol>
</section>
<section>
   <h4>Program</h4>
   <p>
      CocoDoc is written in Java SE 1.8 and deployed in form of an executable, independent jar file.
      GUI is done in Java FX.
      To comply with license, all source code, libraries, licenses, and documentations are included in the jar.
      Documentations are accessible through command line arguments or GUI.
   </p>
   <h5>Program Structure</h5>
   <dl>
      <dt>sheepy.cocodoc</dt><dd>Base package. Main application, config, exception, and app utils are all here.</dd>
      <dt>sheepy.cocodoc.ui</dt><dd>User Interface package.</dd>
      <dt>sheepy.cocodoc.worker</dt><dd>Main processing logic package.</dd>
      <dt>sheepy.cocodoc.worker.directive</dt><dd>Processing directive. Represents major, structural CocoDoc commands, argumented by tasks.</dd>
      <dt>sheepy.cocodoc.worker.parser</dt><dd>Parser package.  Parsers parse Coco tags, Html Tag, or trim JavaScript.</dd>
      <dt>sheepy.cocodoc.worker.task</dt><dd>Task package. A task modifies or parses data, such as converting to base64.</dd>
      <dt>sheepy.util</dt><dd>Generic utilities / helper classes.</dd>
   </dl>

   <h5>Process Flow</h5>
   <ol>
   <li>A job is initialised by selecting a file, through command line or GUI.</li>
   <li>A new <code>Inline</code> <code>Directive</code> is created to read the file and do coco parsing.</li>
   <li>A directive do one of these things when ran (<code>Directive.start</code>):
      <ul>
      <li> <code>DirInline</code> creates a new, empty <code>Block</code>, and calls <code>Worker</code> to run it. </li>
      <li> <code>DirPostProcess</code> is same as <code>DirInline</code>. </li>
      <li> <code>DirStart</code> creates a new <code>Block</code> populated with directive content.
           A clone of parent's parser will <code>start()</code> on the block.
           When done, <code>Worker</code> is called to run the block. </li>
      <li> <code>DirOutput</code> will immediately run all its tasks, which should set the output target of containing block. </li>
      <li> <code>DirEnd</code> is handled by CocoParser. </li>
      </ul>
      Worker runs a <code>Block</code> (<code>INLINE</code> and <code>START</code>) in a new thread.  Trying to get result will block until the thread finish. <br/>
      <code>OUTPUT</code> and <code>END</code> directives does not create new thread and would returns immediately.
   </li>
   <li> Each <code>Inline</code>, <code>Start</code>, and <code>PostProcess</code> directive has a <code>Block</code>.  When a block runs it will:
      <ol>
      <li> Initiate each <code>Task</code> of the directive, which currently just validate parameters. </li>
      <li> Execute each <code>Task</code> one by one. </li>
      <li> If the block has content and has an output target, the block will:
         <ol>
         <li> If block has text content, create a <code>ParserCoco</code> in <i>postprocess</i> mode and parse the block. </li>
         <li> Saves the content into the output and clear the block (make it empty). </li>
         </ol>
      </li>
      <li> Otherwise, the content will be retrieved by the parent block.  If no parent block, they goes to <code>system.out</code>. </li>
      </ol>
   </li>
   <li> Different <code>Task</code> do different things:
      <ol>
      <li> <code>TaskFile</code> (of <code>INLINE Directive</code>) reads file(s) and adds to the block's content. </li>
      <li> <code>TaskFile</code> (of <code>OUTPUT Directive</code>) set the block's output target. </li>
      <li> <code>TaskDelete</code> does nothing and will be executed by <code>ParserCoco</code>. </li>
      <li> <code>TaskPosition</code> does nothing and will be executed by <code>ParserCoco</code>. </li>
      <li> <code>TaskCoco</code> calls <code>ParserCoco.parse</code> to parse <code>Directive</code>s. It does two things:
         <ol>
         <li> <code>start()</code> will parse the document structure:
            <ol>
            <li> Calls <code>parseDirective</code> (which calls <code>parseTask</code>) to find and parse next coco directive. </li>
            <li> In <i>process</i> (normal) mode, <code>DirPostProcess</code> is unprocessed, as if it is plain text. </li>
            <li> In <i>postprocess</i> mode, directive that is not <code>DirPostProcess</code> is unprocessed, as if it is plain text. </li>
            <li> <code>DirStart</code> will cause parser to transfer unparsed text to it and run it (until it meets <code>DirEnd</code>).
                 Then this parsing continues with the (updated) directive text. </li>
            <li> <code>DirEnd</code> immediately stop the parsing, and remaining (unparsed) text to be transferred to the parent <code>DirStart</code>. </li>
            <li> Other directives are ran. </li>
            <li> All directives are added to a list of directives. (except <code>DirEnd</code>) </li>
            <li> Non-directive text are concatenated to form the foundation of result text. </li>
            </ol>
         </li>
         <li> <code>get()</code> will process each parsed <code>Directive</code> to compose the actual result.
            <ol>
            <li> (Result text is parsed as loose XML when necessary, with the first delete or position task.) </li>
            <li> Each <code>delete</code> task parameter is parsed by <code>parseSelector</code> which yields <code>XmlSelector</code>. <br/>
                 <code>locate</code> is called on the selector to get the <code>TextRange</code>, and then deleted from the result. </li>
            <li> If the <code>Directive</code> has no data, process will skip to next directive. </li>
            <li> The last <code>position</code> parameter is also parsed by <code>parseSelector</code> and located. </li>
            <li> If the location is an attribute, it is changed to attribute value instead. </li>
            <li> The location is deleted, and the result inserted to the position. </li>
            </ol>
         </li>
         </ol>
      </li>
      <li> <code>TaskVar</code> and <code>TaskHtml</code> acts depending on data and owning directive:
         <ol>
            <li>For deferred code, like modified time or toc, set block content to a postprocess directive, but only if not already under one.</li>
            <li>Otherwise the task is executed immediately, like setting variable or parsing html.</li>
         </ol>
      </li>
      <li>Other tasks modify or otherwise work with current block data.</li>
      </ol>
   </li>
   </ol>
</section>

<section>
   <h4>Standards</h4>
   <h5>Log Level (Build process)</h5>
   <p>The build process output lots of tracing messages to <code>Directive.log</code> and <code>Task.log</code>.</p>
   <dl>
      <dt>FINE</dt><dd>File IO, Parsed Directive</dd>
      <dt>FINER  </dt><dd>Block Start, Task Start, Block Waiting, Block End</dd>
      <dt>FINEST </dt><dd>Task Step, Task Done, and anything else</dd>
   </dl>
</section>

</body></html>